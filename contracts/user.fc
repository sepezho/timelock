#include "imports/stdlib.fc";
#include "imports/op.fc";
int slice_data_equal? (slice a, slice b) asm "SDEQ";

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
  slice cs = in_msg_full.begin_parse();
  int flags = cs~load_uint(4);

  if (flags & 1) {
    return ();
  }

  slice sender_address = cs~load_msg_addr();
  
  slice ds = get_data().begin_parse();
  slice master_address = ds~load_msg_addr();
  slice owner_addr = ds~load_msg_addr();
  int time = ds~load_uint(32);
  int amount = ds~load_uint(64);
  
  throw_unless(0x555,
    slice_data_equal?(sender_address, master_address)
  ); 
  
  int op = in_msg_body~load_uint(32);
  int query_id = in_msg_body~load_uint(64);
  
  if (op == op::set_user) {
    int new_time = in_msg_body~load_uint(32); 
    int new_amount = in_msg_body~load_uint(64);
    set_data(
      begin_cell()
      .store_slice(master_address)
      .store_slice(owner_addr)
      .store_uint(new_time, 32)
      .store_uint(new_amount, 64)
      .end_cell()
    );
    return ();
  }
  
  if (op == op::get_user) {
    throw_if(0x888, time > now());
    
    var msg = begin_cell()
      .store_uint(0x10, 6) ;; Non-bounceable to be able to deploy
      .store_slice(master_address)
      .store_coins(50000000) ;; 0.01
      .store_uint(0, 1 + 4 + 4 + 64 + 32)
      .store_uint(1, 2);
  
    var msg_body = begin_cell()
      .store_uint(op::unlock_finalize, 32)
      .store_uint(query_id, 64)
      .store_slice(owner_addr)
      .store_uint(time, 32)
      .store_uint(amount, 64)
      .end_cell();

    msg = msg.store_ref(msg_body);
    send_raw_message(msg.end_cell(), 3); ;; revert on errors

    set_data(
      begin_cell()
      .store_slice(master_address)
      .store_slice(owner_addr)
      .store_uint(0, 32)
      .store_uint(0, 64)
      .end_cell()
    );

    return ();
  }

  throw(0xfff); 
}
