(int) get_current_workchain () {
  ;; we can get current workchain from our own address
	var (wc, _) = parse_std_addr(my_address());
	return (wc);
}

(slice) calculate_address (cell state_init) {
	int wc = get_current_workchain();
  ;; to calculate address of our future smart contract we need to calculate hash of state_init cell and then calculate address from this hash + worchain
	return begin_cell()
		.store_uint(4, 3)
		.store_int(wc, 8)
		.store_uint(cell_hash(state_init), 256)
		.end_cell()
		.begin_parse();
}

cell calculate_state_init(
    cell code, slice master_address, slice owner_address
) inline {
  ;; state init of user sc is basicaly a code cell of this sc and start storage cell of this sc
  ;; on start storage cell we store master address, owner address, and 0 for unlock_time and 0 for unlock_amount 
	return begin_cell()
		.store_uint(0, 2)
		.store_dict(code) 
		.store_dict(
        begin_cell()
          .store_slice(master_address)
          .store_slice(owner_address)
          .store_uint(0, 32)
          .store_uint(0, 64)
          .end_cell())
		.store_uint(0, 1)
		.end_cell();
}
