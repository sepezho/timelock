#include "imports/stdlib.fc";
#include "imports/op.fc";
#include "imports/addr-calc.fc";

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
  slice cs = in_msg_full.begin_parse();
  int flags = cs~load_uint(4);
  
  if (flags & 1) {
    return ();
  }
  
  slice sender_address = cs~load_msg_addr();

  int op = in_msg_body~load_uint(32);
  int query_id = in_msg_body~load_uint(64);
  
  slice ds = get_data().begin_parse();
  cell user_code = ds~load_ref();

  if (op == op::lock) {
    cell state_init = calculate_state_init(user_code, my_address(), sender_address);
    slice user_addr = calculate_address(state_init);
    
    int unlock_time = in_msg_body~load_uint(32);
    int unlock_amount = in_msg_body~load_uint(64);
    
    throw_if(0x666, unlock_amount > msg_value);
    throw_if(0x777, unlock_time < now());

    var msg = begin_cell()
      .store_uint(0x10, 6) ;; Non-bounceable to be able to deploy
      .store_slice(user_addr)
      .store_coins(50000000) ;; 0.05
      .store_uint(0, 1 + 4 + 4 + 64 + 32)
      .store_uint(7, 3)
      .store_ref(state_init);
  
    var msg_body = begin_cell()
      .store_uint(op::set_user, 32)
      .store_uint(query_id, 64)
      .store_uint(unlock_time, 32)
      .store_uint(unlock_amount, 64)
      .end_cell();

    msg = msg.store_ref(msg_body);
    send_raw_message(msg.end_cell(), 3); ;; revert on errors
    return ();
  }
  
  if (op == op::unlock) {
    cell state_init = calculate_state_init(user_code, my_address(), sender_address);
    slice user_addr = calculate_address(state_init);
    
    var msg = begin_cell()
      .store_uint(0x10, 6) ;; Non-bounceable to be able to deploy
      .store_slice(user_addr)
      .store_coins(50000000) ;; 0.05
      .store_uint(0, 1 + 4 + 4 + 64 + 32)
      .store_uint(1, 2);
  
    var msg_body = begin_cell()
      .store_uint(op::get_user, 32)
      .store_uint(query_id, 64)
      .end_cell();

    msg = msg.store_ref(msg_body);
    send_raw_message(msg.end_cell(), 3); ;; revert on errors
    return ();
  }
  
  if (op == op::unlock_finalize) {
    slice owner_address = in_msg_body~load_msg_addr(); 
    int time = in_msg_body~load_uint(32); 
    int amount = in_msg_body~load_uint(64);

    cell state_init = calculate_state_init(user_code, my_address(), owner_address);
    slice user_addr = calculate_address(state_init);

    throw_unless(0x555,
      slice_data_equal?(sender_address, user_addr)
    ); 
    
    var msg = begin_cell()
      .store_uint(0x10, 6) ;; Non-bounceable to be able to deploy
      .store_slice(owner_address)
      .store_coins(amount) ;; 0.05
      .store_uint(0, 1 + 4 + 4 + 64 + 32)
      .store_uint(1, 2);
  
    var msg_body = begin_cell()
      .store_uint(op::success, 32)
      .store_uint(query_id, 64)
      .end_cell();

    msg = msg.store_ref(msg_body);
    send_raw_message(msg.end_cell(), 3); ;; revert on errors
    return ();
  }

  if (op == op::init_master) {
    ;; do nothing
    return ();
  }
  
  throw(0xfff); 
}
